struct Vector2 {
	var x : float 
	var y : float 
}
struct Vector3 {
    var x : float
    var y : float
    var z : float
}
struct Vector4 {
    var x : float
    var y : float
    var z : float
    var w : float
}
struct Image {
    var data : void ptr
    var width : int
    var height : int
    var mipmaps : int
    var format : int
}
struct Color {
    var r : u8
    var g : u8
    var b : u8
    var a : u8
}
struct Camera2D {
    var offset : struct Vector2
    var target : struct Vector2
    var rotation : float
    var zoom : float
}
struct Camera3D {
    var position : struct Vector3
    var target : struct Vector3
    var up : struct Vector3
    var fovy : float
    var projection : int
}
struct Texture {
    var id : u32
    var width : int
    var height : int
    var mipmaps : int
    var format : int
}
struct Texture2D {
    var id : u32
    var width : int
    var height : int
    var mipmaps : int
    var format : int
}
struct TextureCubemap {
    var id : u32
    var width : int
    var height : int
    var mipmaps : int
    var format : int
}
struct RenderTexture2D {
    var id : u32
    var texture : struct Texture
    var depth : struct Texture
}
struct Shader {
    var id : u32
    var locs : int ptr
}
struct Matrix {
    var m0 : float
    var m4 : float
    var m8 : float
    var m12 : float
    var m1 : float
    var m5 : float
    var m9 : float
    var m13 : float
    var m2 : float
    var m6 : float
    var m10 : float
    var m14 : float
    var m3 : float
    var m7 : float
    var m11 : float
    var m15 : float
}
struct VrStereoConfig {
    var projection[2] : struct Matrix
    var viewOffset[2] : struct Matrix
    var leftLensCenter[2] : float
    var rightLensCenter[2] : float
    var leftScreenCenter[2] : float
    var rightScreenCenter[2] : float
    var scale[2] : float
    var scaleIn[2] : float
}
struct VrDeviceInfo {
    var hResolution : int
    var vResolution : int
    var hScreenSize : float
    var vScreenSize : float
    var vScreenCenter : float
    var eyeToScreenDistance : float
    var lensSeparationDistance : float
    var interpupillaryDistance : float
    var lensDistortionValues[4] : float
    var chromaAbCorrection[4] : float
}
struct Ray {
    var position : struct Vector3
    var direction : struct Vector3
}
struct Camera {
    var offset : struct Vector2
    var target : struct Vector2
    var rotation : float
    var zoom : float
}
struct FilePathList {
    var capacity : u32
    var count : u32
    var path : i8 ptr ptr
}
struct AutomationEvent {
    var frame : u32
    var type_ : u32
    var params[4] : int
}
struct AutomationEventList {
    var capacity : u32
    var count : u32
    var events : struct AutomationEvent ptr
}
struct Rectangle {
    var x : float
    var y : float
    var width : float
    var height : float
}
struct GlyphInfo {
    var value : int
    var offsetX : int
    var offsetY : int
    var advanceX : int
    var image  : struct Image
}
struct Font {
    var baseSize : int
    var glyphCount : int
    var glyphPadding : int
    var texture : struct Texture2D
    var recs : struct Rectangle ptr
    var glyphs : struct GlyphInfo ptr
}
struct NPatchInfo {
    var source : struct Rectangle
    var left : int
    var top : int
    var right : int
    var bottom : int
    var layout : int
}
struct MaterialMap {
    var shader : struct Shader
    var color : struct Color
    var value : float
}
struct Material {
    var shader : struct Shader
    var maps : struct MaterialMap ptr
    var params[4] : float
}
struct Mesh {
    var vertexCount : int
    var triangleCount : int
    var vertices : float ptr
    var texcoords : float ptr
    var texcoords2 : float ptr
    var normals : float ptr
    var tangents : float ptr
    var colors : u8 ptr
    var indices : u16 ptr
    var animVertices : float ptr
    var animNormals : float ptr
    var boneIds : u8 ptr
    var boneWeights : float ptr
    var vaoId : u32
    var vboId : u32 ptr
}
struct BoneInfo {
    var name[32] : i8
    var parent : int
}
struct Transform {
    var translation : struct Vector3
    var rotation : struct Vector4
    var scale : struct Vector3
}
struct Model {
    var transform : struct Matrix
    var meshCount : int
    var materialCount : int
    var meshes : struct Mesh ptr
    var materials : struct Material ptr
    var boneCount : int
    var bones : struct BoneInfo ptr
    var bindPose : struct Transform ptr
}
struct BoundingBox {
    var min : struct Vector3
    var max : struct Vector3
}
struct ModelAnimation {
    var boneCount : int
    var frameCount : int
    var bones : struct BoneInfo ptr
    var framePoses : struct Transform ptr ptr
    var name[32] : i8
}
struct RayCollision {
    var hit : u8
    var distance : float
    var point : struct Vector3
    var normal : struct Vector3
}
struct Wave {
    var frameCount : u32
    var sampleRate : u32
    var sampleSize : u32
    var channels : u32 
    var data : void ptr
}
// opaque
struct rAudioBuffer {
    var a : int
}
// opaque
struct rAudioProcessor {
    var a : int
}
struct AudioStream {
    var buffer : struct rAudioBuffer ptr
    var processor : struct rAudioProcessor ptr
    var sampleRate : u32
    var sampleSize : u32
    var channels : u32
}
struct Sound {
    var stream : struct AudioStream
    var frameCount : u32
}
struct Music {
    var stream : struct AudioStream
    var frameCount : u32
    var looping : u8
    var ctxType : int
    var ctxData : void ptr
}
enum ConfigFlags {
	FLAG_VSYNC_HINT = 64
	FLAG_FULLSCREEN_MODE = 2
	FLAG_WINDOW_RESIZABLE = 4
	FLAG_WINDOW_UNDECORATED = 8
	FLAG_WINDOW_HIDDEN = 128
	FLAG_WINDOW_MINIMIZED = 512
	FLAG_WINDOW_MAXIMIZED = 1024
	FLAG_WINDOW_UNFOCUSED = 2048
	FLAG_WINDOW_TOPMOST = 4096
	FLAG_WINDOW_ALWAYS_RUN = 256
	FLAG_WINDOW_TRANSPARENT = 16
	FLAG_WINDOW_HIGHDPI = 8192
	FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384
	FLAG_BORDERLESS_WINDOWED_MODE = 32768
	FLAG_MSAA_4X_HINT = 32
	FLAG_INTERLACED_HINT = 65536
}
enum ConfigFlags {
	FLAG_VSYNC_HINT = 64
	FLAG_FULLSCREEN_MODE = 2
	FLAG_WINDOW_RESIZABLE = 4
	FLAG_WINDOW_UNDECORATED = 8
	FLAG_WINDOW_HIDDEN = 128
	FLAG_WINDOW_MINIMIZED = 512
	FLAG_WINDOW_MAXIMIZED = 1024
	FLAG_WINDOW_UNFOCUSED = 2048
	FLAG_WINDOW_TOPMOST = 4096
	FLAG_WINDOW_ALWAYS_RUN = 256
	FLAG_WINDOW_TRANSPARENT = 16
	FLAG_WINDOW_HIGHDPI = 8192
	FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384
	FLAG_BORDERLESS_WINDOWED_MODE = 32768
	FLAG_MSAA_4X_HINT = 32
	FLAG_INTERLACED_HINT = 65536
}
enum TraceLogLevel {
	LOG_ALL = 0
	LOG_TRACE
	LOG_DEBUG
	LOG_INFO
	LOG_WARNING
	LOG_ERROR
	LOG_FATAL
	LOG_NONE
}
enum TraceLogLevel {
	LOG_ALL = 0
	LOG_TRACE
	LOG_DEBUG
	LOG_INFO
	LOG_WARNING
	LOG_ERROR
	LOG_FATAL
	LOG_NONE
}
enum KeyboardKey {
	KEY_NULL = 0
	KEY_APOSTROPHE = 39
	KEY_COMMA = 44
	KEY_MINUS = 45
	KEY_PERIOD = 46
	KEY_SLASH = 47
	KEY_ZERO = 48
	KEY_ONE = 49
	KEY_TWO = 50
	KEY_THREE = 51
	KEY_FOUR = 52
	KEY_FIVE = 53
	KEY_SIX = 54
	KEY_SEVEN = 55
	KEY_EIGHT = 56
	KEY_NINE = 57
	KEY_SEMICOLON = 59
	KEY_EQUAL = 61
	KEY_A = 65
	KEY_B = 66
	KEY_C = 67
	KEY_D = 68
	KEY_E = 69
	KEY_F = 70
	KEY_G = 71
	KEY_H = 72
	KEY_I = 73
	KEY_J = 74
	KEY_K = 75
	KEY_L = 76
	KEY_M = 77
	KEY_N = 78
	KEY_O = 79
	KEY_P = 80
	KEY_Q = 81
	KEY_R = 82
	KEY_S = 83
	KEY_T = 84
	KEY_U = 85
	KEY_V = 86
	KEY_W = 87
	KEY_X = 88
	KEY_Y = 89
	KEY_Z = 90
	KEY_LEFT_BRACKET = 91
	KEY_BACKSLASH = 92
	KEY_RIGHT_BRACKET = 93
	KEY_GRAVE = 96
	KEY_SPACE = 32
	KEY_ESCAPE = 256
	KEY_ENTER = 257
	KEY_TAB = 258
	KEY_BACKSPACE = 259
	KEY_INSERT = 260
	KEY_DELETE = 261
	KEY_RIGHT = 262
	KEY_LEFT = 263
	KEY_DOWN = 264
	KEY_UP = 265
	KEY_PAGE_UP = 266
	KEY_PAGE_DOWN = 267
	KEY_HOME = 268
	KEY_END = 269
	KEY_CAPS_LOCK = 280
	KEY_SCROLL_LOCK = 281
	KEY_NUM_LOCK = 282
	KEY_PRINT_SCREEN = 283
	KEY_PAUSE = 284
	KEY_F1 = 290
	KEY_F2 = 291
	KEY_F3 = 292
	KEY_F4 = 293
	KEY_F5 = 294
	KEY_F6 = 295
	KEY_F7 = 296
	KEY_F8 = 297
	KEY_F9 = 298
	KEY_F10 = 299
	KEY_F11 = 300
	KEY_F12 = 301
	KEY_LEFT_SHIFT = 340
	KEY_LEFT_CONTROL = 341
	KEY_LEFT_ALT = 342
	KEY_LEFT_SUPER = 343
	KEY_RIGHT_SHIFT = 344
	KEY_RIGHT_CONTROL = 345
	KEY_RIGHT_ALT = 346
	KEY_RIGHT_SUPER = 347
	KEY_KB_MENU = 348
	KEY_KP_0 = 320
	KEY_KP_1 = 321
	KEY_KP_2 = 322
	KEY_KP_3 = 323
	KEY_KP_4 = 324
	KEY_KP_5 = 325
	KEY_KP_6 = 326
	KEY_KP_7 = 327
	KEY_KP_8 = 328
	KEY_KP_9 = 329
	KEY_KP_DECIMAL = 330
	KEY_KP_DIVIDE = 331
	KEY_KP_MULTIPLY = 332
	KEY_KP_SUBTRACT = 333
	KEY_KP_ADD = 334
	KEY_KP_ENTER = 335
	KEY_KP_EQUAL = 336
	KEY_BACK = 4
	KEY_MENU = 82
	KEY_VOLUME_UP = 24
	KEY_VOLUME_DOWN = 25
}
enum KeyboardKey {
	KEY_NULL = 0
	KEY_APOSTROPHE = 39
	KEY_COMMA = 44
	KEY_MINUS = 45
	KEY_PERIOD = 46
	KEY_SLASH = 47
	KEY_ZERO = 48
	KEY_ONE = 49
	KEY_TWO = 50
	KEY_THREE = 51
	KEY_FOUR = 52
	KEY_FIVE = 53
	KEY_SIX = 54
	KEY_SEVEN = 55
	KEY_EIGHT = 56
	KEY_NINE = 57
	KEY_SEMICOLON = 59
	KEY_EQUAL = 61
	KEY_A = 65
	KEY_B = 66
	KEY_C = 67
	KEY_D = 68
	KEY_E = 69
	KEY_F = 70
	KEY_G = 71
	KEY_H = 72
	KEY_I = 73
	KEY_J = 74
	KEY_K = 75
	KEY_L = 76
	KEY_M = 77
	KEY_N = 78
	KEY_O = 79
	KEY_P = 80
	KEY_Q = 81
	KEY_R = 82
	KEY_S = 83
	KEY_T = 84
	KEY_U = 85
	KEY_V = 86
	KEY_W = 87
	KEY_X = 88
	KEY_Y = 89
	KEY_Z = 90
	KEY_LEFT_BRACKET = 91
	KEY_BACKSLASH = 92
	KEY_RIGHT_BRACKET = 93
	KEY_GRAVE = 96
	KEY_SPACE = 32
	KEY_ESCAPE = 256
	KEY_ENTER = 257
	KEY_TAB = 258
	KEY_BACKSPACE = 259
	KEY_INSERT = 260
	KEY_DELETE = 261
	KEY_RIGHT = 262
	KEY_LEFT = 263
	KEY_DOWN = 264
	KEY_UP = 265
	KEY_PAGE_UP = 266
	KEY_PAGE_DOWN = 267
	KEY_HOME = 268
	KEY_END = 269
	KEY_CAPS_LOCK = 280
	KEY_SCROLL_LOCK = 281
	KEY_NUM_LOCK = 282
	KEY_PRINT_SCREEN = 283
	KEY_PAUSE = 284
	KEY_F1 = 290
	KEY_F2 = 291
	KEY_F3 = 292
	KEY_F4 = 293
	KEY_F5 = 294
	KEY_F6 = 295
	KEY_F7 = 296
	KEY_F8 = 297
	KEY_F9 = 298
	KEY_F10 = 299
	KEY_F11 = 300
	KEY_F12 = 301
	KEY_LEFT_SHIFT = 340
	KEY_LEFT_CONTROL = 341
	KEY_LEFT_ALT = 342
	KEY_LEFT_SUPER = 343
	KEY_RIGHT_SHIFT = 344
	KEY_RIGHT_CONTROL = 345
	KEY_RIGHT_ALT = 346
	KEY_RIGHT_SUPER = 347
	KEY_KB_MENU = 348
	KEY_KP_0 = 320
	KEY_KP_1 = 321
	KEY_KP_2 = 322
	KEY_KP_3 = 323
	KEY_KP_4 = 324
	KEY_KP_5 = 325
	KEY_KP_6 = 326
	KEY_KP_7 = 327
	KEY_KP_8 = 328
	KEY_KP_9 = 329
	KEY_KP_DECIMAL = 330
	KEY_KP_DIVIDE = 331
	KEY_KP_MULTIPLY = 332
	KEY_KP_SUBTRACT = 333
	KEY_KP_ADD = 334
	KEY_KP_ENTER = 335
	KEY_KP_EQUAL = 336
	KEY_BACK = 4
	KEY_MENU = 82
	KEY_VOLUME_UP = 24
	KEY_VOLUME_DOWN = 25
}
enum MouseButton {
	MOUSE_BUTTON_LEFT = 0
	MOUSE_BUTTON_RIGHT = 1
	MOUSE_BUTTON_MIDDLE = 2
	MOUSE_BUTTON_SIDE = 3
	MOUSE_BUTTON_EXTRA = 4
	MOUSE_BUTTON_FORWARD = 5
	MOUSE_BUTTON_BACK = 6
}
enum MouseButton {
	MOUSE_BUTTON_LEFT = 0
	MOUSE_BUTTON_RIGHT = 1
	MOUSE_BUTTON_MIDDLE = 2
	MOUSE_BUTTON_SIDE = 3
	MOUSE_BUTTON_EXTRA = 4
	MOUSE_BUTTON_FORWARD = 5
	MOUSE_BUTTON_BACK = 6
}
enum MouseCursor {
	MOUSE_CURSOR_DEFAULT = 0
	MOUSE_CURSOR_ARROW = 1
	MOUSE_CURSOR_IBEAM = 2
	MOUSE_CURSOR_CROSSHAIR = 3
	MOUSE_CURSOR_POINTING_HAND = 4
	MOUSE_CURSOR_RESIZE_EW = 5
	MOUSE_CURSOR_RESIZE_NS = 6
	MOUSE_CURSOR_RESIZE_NWSE = 7
	MOUSE_CURSOR_RESIZE_NESW = 8
	MOUSE_CURSOR_RESIZE_ALL = 9
	MOUSE_CURSOR_NOT_ALLOWED = 10
}
enum MouseCursor {
	MOUSE_CURSOR_DEFAULT = 0
	MOUSE_CURSOR_ARROW = 1
	MOUSE_CURSOR_IBEAM = 2
	MOUSE_CURSOR_CROSSHAIR = 3
	MOUSE_CURSOR_POINTING_HAND = 4
	MOUSE_CURSOR_RESIZE_EW = 5
	MOUSE_CURSOR_RESIZE_NS = 6
	MOUSE_CURSOR_RESIZE_NWSE = 7
	MOUSE_CURSOR_RESIZE_NESW = 8
	MOUSE_CURSOR_RESIZE_ALL = 9
	MOUSE_CURSOR_NOT_ALLOWED = 10
}
enum GamepadButton {
	GAMEPAD_BUTTON_UNKNOWN = 0
	GAMEPAD_BUTTON_LEFT_FACE_UP
	GAMEPAD_BUTTON_LEFT_FACE_RIGHT
	GAMEPAD_BUTTON_LEFT_FACE_DOWN
	GAMEPAD_BUTTON_LEFT_FACE_LEFT
	GAMEPAD_BUTTON_RIGHT_FACE_UP
	GAMEPAD_BUTTON_RIGHT_FACE_RIGHT
	GAMEPAD_BUTTON_RIGHT_FACE_DOWN
	GAMEPAD_BUTTON_RIGHT_FACE_LEFT
	GAMEPAD_BUTTON_LEFT_TRIGGER_1
	GAMEPAD_BUTTON_LEFT_TRIGGER_2
	GAMEPAD_BUTTON_RIGHT_TRIGGER_1
	GAMEPAD_BUTTON_RIGHT_TRIGGER_2
	GAMEPAD_BUTTON_MIDDLE_LEFT
	GAMEPAD_BUTTON_MIDDLE
	GAMEPAD_BUTTON_MIDDLE_RIGHT
	GAMEPAD_BUTTON_LEFT_THUMB
	GAMEPAD_BUTTON_RIGHT_THUMB
}
enum GamepadButton {
	GAMEPAD_BUTTON_UNKNOWN = 0
	GAMEPAD_BUTTON_LEFT_FACE_UP
	GAMEPAD_BUTTON_LEFT_FACE_RIGHT
	GAMEPAD_BUTTON_LEFT_FACE_DOWN
	GAMEPAD_BUTTON_LEFT_FACE_LEFT
	GAMEPAD_BUTTON_RIGHT_FACE_UP
	GAMEPAD_BUTTON_RIGHT_FACE_RIGHT
	GAMEPAD_BUTTON_RIGHT_FACE_DOWN
	GAMEPAD_BUTTON_RIGHT_FACE_LEFT
	GAMEPAD_BUTTON_LEFT_TRIGGER_1
	GAMEPAD_BUTTON_LEFT_TRIGGER_2
	GAMEPAD_BUTTON_RIGHT_TRIGGER_1
	GAMEPAD_BUTTON_RIGHT_TRIGGER_2
	GAMEPAD_BUTTON_MIDDLE_LEFT
	GAMEPAD_BUTTON_MIDDLE
	GAMEPAD_BUTTON_MIDDLE_RIGHT
	GAMEPAD_BUTTON_LEFT_THUMB
	GAMEPAD_BUTTON_RIGHT_THUMB
}
enum GamepadAxis {
	GAMEPAD_AXIS_LEFT_X = 0
	GAMEPAD_AXIS_LEFT_Y = 1
	GAMEPAD_AXIS_RIGHT_X = 2
	GAMEPAD_AXIS_RIGHT_Y = 3
	GAMEPAD_AXIS_LEFT_TRIGGER = 4
	GAMEPAD_AXIS_RIGHT_TRIGGER = 5
}
enum GamepadAxis {
	GAMEPAD_AXIS_LEFT_X = 0
	GAMEPAD_AXIS_LEFT_Y = 1
	GAMEPAD_AXIS_RIGHT_X = 2
	GAMEPAD_AXIS_RIGHT_Y = 3
	GAMEPAD_AXIS_LEFT_TRIGGER = 4
	GAMEPAD_AXIS_RIGHT_TRIGGER = 5
}
enum MaterialMapIndex {
	MATERIAL_MAP_ALBEDO = 0
	MATERIAL_MAP_METALNESS
	MATERIAL_MAP_NORMAL
	MATERIAL_MAP_ROUGHNESS
	MATERIAL_MAP_OCCLUSION
	MATERIAL_MAP_EMISSION
	MATERIAL_MAP_HEIGHT
	MATERIAL_MAP_CUBEMAP
	MATERIAL_MAP_IRRADIANCE
	MATERIAL_MAP_PREFILTER
	MATERIAL_MAP_BRDF
}
enum MaterialMapIndex {
	MATERIAL_MAP_ALBEDO = 0
	MATERIAL_MAP_METALNESS
	MATERIAL_MAP_NORMAL
	MATERIAL_MAP_ROUGHNESS
	MATERIAL_MAP_OCCLUSION
	MATERIAL_MAP_EMISSION
	MATERIAL_MAP_HEIGHT
	MATERIAL_MAP_CUBEMAP
	MATERIAL_MAP_IRRADIANCE
	MATERIAL_MAP_PREFILTER
	MATERIAL_MAP_BRDF
}
enum ShaderLocationIndex {
	SHADER_LOC_VERTEX_POSITION = 0
	SHADER_LOC_VERTEX_TEXCOORD01
	SHADER_LOC_VERTEX_TEXCOORD02
	SHADER_LOC_VERTEX_NORMAL
	SHADER_LOC_VERTEX_TANGENT
	SHADER_LOC_VERTEX_COLOR
	SHADER_LOC_MATRIX_MVP
	SHADER_LOC_MATRIX_VIEW
	SHADER_LOC_MATRIX_PROJECTION
	SHADER_LOC_MATRIX_MODEL
	SHADER_LOC_MATRIX_NORMAL
	SHADER_LOC_VECTOR_VIEW
	SHADER_LOC_COLOR_DIFFUSE
	SHADER_LOC_COLOR_SPECULAR
	SHADER_LOC_COLOR_AMBIENT
	SHADER_LOC_MAP_ALBEDO
	SHADER_LOC_MAP_METALNESS
	SHADER_LOC_MAP_NORMAL
	SHADER_LOC_MAP_ROUGHNESS
	SHADER_LOC_MAP_OCCLUSION
	SHADER_LOC_MAP_EMISSION
	SHADER_LOC_MAP_HEIGHT
	SHADER_LOC_MAP_CUBEMAP
	SHADER_LOC_MAP_IRRADIANCE
	SHADER_LOC_MAP_PREFILTER
	SHADER_LOC_MAP_BRDF
}
enum ShaderLocationIndex {
	SHADER_LOC_VERTEX_POSITION = 0
	SHADER_LOC_VERTEX_TEXCOORD01
	SHADER_LOC_VERTEX_TEXCOORD02
	SHADER_LOC_VERTEX_NORMAL
	SHADER_LOC_VERTEX_TANGENT
	SHADER_LOC_VERTEX_COLOR
	SHADER_LOC_MATRIX_MVP
	SHADER_LOC_MATRIX_VIEW
	SHADER_LOC_MATRIX_PROJECTION
	SHADER_LOC_MATRIX_MODEL
	SHADER_LOC_MATRIX_NORMAL
	SHADER_LOC_VECTOR_VIEW
	SHADER_LOC_COLOR_DIFFUSE
	SHADER_LOC_COLOR_SPECULAR
	SHADER_LOC_COLOR_AMBIENT
	SHADER_LOC_MAP_ALBEDO
	SHADER_LOC_MAP_METALNESS
	SHADER_LOC_MAP_NORMAL
	SHADER_LOC_MAP_ROUGHNESS
	SHADER_LOC_MAP_OCCLUSION
	SHADER_LOC_MAP_EMISSION
	SHADER_LOC_MAP_HEIGHT
	SHADER_LOC_MAP_CUBEMAP
	SHADER_LOC_MAP_IRRADIANCE
	SHADER_LOC_MAP_PREFILTER
	SHADER_LOC_MAP_BRDF
}
enum ShaderUniformDataType {
	SHADER_UNIFORM_FLOAT = 0
	SHADER_UNIFORM_VEC2
	SHADER_UNIFORM_VEC3
	SHADER_UNIFORM_VEC4
	SHADER_UNIFORM_INT
	SHADER_UNIFORM_IVEC2
	SHADER_UNIFORM_IVEC3
	SHADER_UNIFORM_IVEC4
	SHADER_UNIFORM_SAMPLER2D
}
enum ShaderUniformDataType {
	SHADER_UNIFORM_FLOAT = 0
	SHADER_UNIFORM_VEC2
	SHADER_UNIFORM_VEC3
	SHADER_UNIFORM_VEC4
	SHADER_UNIFORM_INT
	SHADER_UNIFORM_IVEC2
	SHADER_UNIFORM_IVEC3
	SHADER_UNIFORM_IVEC4
	SHADER_UNIFORM_SAMPLER2D
}
enum ShaderAttributeDataType {
	SHADER_ATTRIB_FLOAT = 0
	SHADER_ATTRIB_VEC2
	SHADER_ATTRIB_VEC3
	SHADER_ATTRIB_VEC4
}
enum ShaderAttributeDataType {
	SHADER_ATTRIB_FLOAT = 0
	SHADER_ATTRIB_VEC2
	SHADER_ATTRIB_VEC3
	SHADER_ATTRIB_VEC4
}
enum PixelFormat {
	PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1
	PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA
	PIXELFORMAT_UNCOMPRESSED_R5G6B5
	PIXELFORMAT_UNCOMPRESSED_R8G8B8
	PIXELFORMAT_UNCOMPRESSED_R5G5B5A1
	PIXELFORMAT_UNCOMPRESSED_R4G4B4A4
	PIXELFORMAT_UNCOMPRESSED_R8G8B8A8
	PIXELFORMAT_UNCOMPRESSED_R32
	PIXELFORMAT_UNCOMPRESSED_R32G32B32
	PIXELFORMAT_UNCOMPRESSED_R32G32B32A32
	PIXELFORMAT_UNCOMPRESSED_R16
	PIXELFORMAT_UNCOMPRESSED_R16G16B16
	PIXELFORMAT_UNCOMPRESSED_R16G16B16A16
	PIXELFORMAT_COMPRESSED_DXT1_RGB
	PIXELFORMAT_COMPRESSED_DXT1_RGBA
	PIXELFORMAT_COMPRESSED_DXT3_RGBA
	PIXELFORMAT_COMPRESSED_DXT5_RGBA
	PIXELFORMAT_COMPRESSED_ETC1_RGB
	PIXELFORMAT_COMPRESSED_ETC2_RGB
	PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA
	PIXELFORMAT_COMPRESSED_PVRT_RGB
	PIXELFORMAT_COMPRESSED_PVRT_RGBA
	PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA
	PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA
}
enum PixelFormat {
	PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1
	PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA
	PIXELFORMAT_UNCOMPRESSED_R5G6B5
	PIXELFORMAT_UNCOMPRESSED_R8G8B8
	PIXELFORMAT_UNCOMPRESSED_R5G5B5A1
	PIXELFORMAT_UNCOMPRESSED_R4G4B4A4
	PIXELFORMAT_UNCOMPRESSED_R8G8B8A8
	PIXELFORMAT_UNCOMPRESSED_R32
	PIXELFORMAT_UNCOMPRESSED_R32G32B32
	PIXELFORMAT_UNCOMPRESSED_R32G32B32A32
	PIXELFORMAT_UNCOMPRESSED_R16
	PIXELFORMAT_UNCOMPRESSED_R16G16B16
	PIXELFORMAT_UNCOMPRESSED_R16G16B16A16
	PIXELFORMAT_COMPRESSED_DXT1_RGB
	PIXELFORMAT_COMPRESSED_DXT1_RGBA
	PIXELFORMAT_COMPRESSED_DXT3_RGBA
	PIXELFORMAT_COMPRESSED_DXT5_RGBA
	PIXELFORMAT_COMPRESSED_ETC1_RGB
	PIXELFORMAT_COMPRESSED_ETC2_RGB
	PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA
	PIXELFORMAT_COMPRESSED_PVRT_RGB
	PIXELFORMAT_COMPRESSED_PVRT_RGBA
	PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA
	PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA
}
enum TextureFilter {
	TEXTURE_FILTER_POINT = 0
	TEXTURE_FILTER_BILINEAR
	TEXTURE_FILTER_TRILINEAR
	TEXTURE_FILTER_ANISOTROPIC_4X
	TEXTURE_FILTER_ANISOTROPIC_8X
	TEXTURE_FILTER_ANISOTROPIC_16X
}
enum TextureFilter {
	TEXTURE_FILTER_POINT = 0
	TEXTURE_FILTER_BILINEAR
	TEXTURE_FILTER_TRILINEAR
	TEXTURE_FILTER_ANISOTROPIC_4X
	TEXTURE_FILTER_ANISOTROPIC_8X
	TEXTURE_FILTER_ANISOTROPIC_16X
}
enum TextureWrap {
	TEXTURE_WRAP_REPEAT = 0
	TEXTURE_WRAP_CLAMP
	TEXTURE_WRAP_MIRROR_REPEAT
	TEXTURE_WRAP_MIRROR_CLAMP
}
enum TextureWrap {
	TEXTURE_WRAP_REPEAT = 0
	TEXTURE_WRAP_CLAMP
	TEXTURE_WRAP_MIRROR_REPEAT
	TEXTURE_WRAP_MIRROR_CLAMP
}
enum CubemapLayout {
	CUBEMAP_LAYOUT_AUTO_DETECT = 0
	CUBEMAP_LAYOUT_LINE_VERTICAL
	CUBEMAP_LAYOUT_LINE_HORIZONTAL
	CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR
	CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE
	CUBEMAP_LAYOUT_PANORAMA
}
enum CubemapLayout {
	CUBEMAP_LAYOUT_AUTO_DETECT = 0
	CUBEMAP_LAYOUT_LINE_VERTICAL
	CUBEMAP_LAYOUT_LINE_HORIZONTAL
	CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR
	CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE
	CUBEMAP_LAYOUT_PANORAMA
}
enum FontType {
	FONT_DEFAULT = 0
	FONT_BITMAP
	FONT_SDF
}
enum FontType {
	FONT_DEFAULT = 0
	FONT_BITMAP
	FONT_SDF
}
enum BlendMode {
	BLEND_ALPHA = 0
	BLEND_ADDITIVE
	BLEND_MULTIPLIED
	BLEND_ADD_COLORS
	BLEND_SUBTRACT_COLORS
	BLEND_ALPHA_PREMULTIPLY
	BLEND_CUSTOM
	BLEND_CUSTOM_SEPARATE
}
enum BlendMode {
	BLEND_ALPHA = 0
	BLEND_ADDITIVE
	BLEND_MULTIPLIED
	BLEND_ADD_COLORS
	BLEND_SUBTRACT_COLORS
	BLEND_ALPHA_PREMULTIPLY
	BLEND_CUSTOM
	BLEND_CUSTOM_SEPARATE
}
enum Gesture {
	GESTURE_NONE = 0
	GESTURE_TAP = 1
	GESTURE_DOUBLETAP = 2
	GESTURE_HOLD = 4
	GESTURE_DRAG = 8
	GESTURE_SWIPE_RIGHT = 16
	GESTURE_SWIPE_LEFT = 32
	GESTURE_SWIPE_UP = 64
	GESTURE_SWIPE_DOWN = 128
	GESTURE_PINCH_IN = 256
	GESTURE_PINCH_OUT = 512
}
enum Gesture {
	GESTURE_NONE = 0
	GESTURE_TAP = 1
	GESTURE_DOUBLETAP = 2
	GESTURE_HOLD = 4
	GESTURE_DRAG = 8
	GESTURE_SWIPE_RIGHT = 16
	GESTURE_SWIPE_LEFT = 32
	GESTURE_SWIPE_UP = 64
	GESTURE_SWIPE_DOWN = 128
	GESTURE_PINCH_IN = 256
	GESTURE_PINCH_OUT = 512
}
enum CameraMode {
	CAMERA_CUSTOM = 0
	CAMERA_FREE
	CAMERA_ORBITAL
	CAMERA_FIRST_PERSON
	CAMERA_THIRD_PERSON
}
enum CameraMode {
	CAMERA_CUSTOM = 0
	CAMERA_FREE
	CAMERA_ORBITAL
	CAMERA_FIRST_PERSON
	CAMERA_THIRD_PERSON
}
enum CameraProjection {
	CAMERA_PERSPECTIVE = 0
	CAMERA_ORTHOGRAPHIC
}
enum CameraProjection {
	CAMERA_PERSPECTIVE = 0
	CAMERA_ORTHOGRAPHIC
}
enum NPatchLayout {
	NPATCH_NINE_PATCH = 0
	NPATCH_THREE_PATCH_VERTICAL
	NPATCH_THREE_PATCH_HORIZONTAL
}
enum NPatchLayout {
	NPATCH_NINE_PATCH = 0
	NPATCH_THREE_PATCH_VERTICAL
	NPATCH_THREE_PATCH_HORIZONTAL
}
extern InitWindow(width : int, height : int, title : i8 ptr) void;
extern CloseWindow() void;
extern WindowShouldClose() int;
extern IsWindowReady() int;
extern IsWindowFullscreen() int;
extern IsWindowHidden() int;
extern IsWindowMinimized() int;
extern IsWindowMaximized() int;
extern IsWindowFocused() int;
extern IsWindowResized() int;
extern IsWindowState() int;
extern SetWindowState(flags : u32) void;
extern ClearWindowState(flags : u32) void;
extern ToggleFullscreen() void;
extern ToggleBorderlessWindowed() void;
extern MaximizeWindow() void;
extern MinimizeWindow() void;
extern RestoreWindow() void;
extern SetWindowIcon(image : struct Image) void;
extern SetWindowIcons(images : struct Image ptr, count : int) void;
extern SetWindowTitle(title : i8 ptr) void;
extern SetWindowPosition(x : int, y : int) void;
extern SetWindowMonitor(monitor : int) void;
extern SetWindowMinSize(width : int, height : int) void;
extern SetWindowMaxSize(width : int, height : int) void;
extern SetWindowSize(width : int, height : int) void;
extern SetWindowOpacity(opacity : float) void;
extern SetWindowFocused() void;
extern GetWindowHandle() void ptr;
extern GetScreenWidth() int;
extern GetScreenHeight() int;
extern GetRenderWidth() int;
extern GetRenderHeight() int;
extern GetMonitorCount() int;
extern GetCurrentMonitor() int;
extern GetMonitorPosition(monitor : int) struct Vector2;
extern GetMonitorWidth(monitor : int) int;
extern GetMonitorHeight(monitor : int) int;
extern GetMonitorPhysicalWidth(monitor : int) int;
extern GetMonitorPhysicalHeight(monitor : int) int;
extern GetMonitorRefreshRate(monitor : int) int;
extern GetWindowPosition() struct Vector2;
extern GetWindowScaleDPI() struct Vector2;
extern GetMonitorName(monitor : int) i8 ptr;
extern SetClipboardText(text : i8 ptr) void;
extern GetClipboardText() i8 ptr;
extern EnableEventWaiting() void;
extern DisableEventWaiting() void;
extern ShowCursor() void;
extern HideCursor() void;
extern IsCursorHidden() int;
extern EnableCursor() void;
extern DisableCursor() void;
extern IsCursorOnScreen() int;
extern ClearBackground(color : struct Color) void;
extern BeginDrawing() void;
extern EndDrawing() void;
extern BeginMode2D(camera : struct Camera2D) void;
extern EndMode2D() void;
extern BeginMode3D(camera : struct Camera3D) void;
extern EndMode3D() void;
extern BeginTextureMode(target : struct RenderTexture2D) void;
extern EndTextureMode() void;
extern BeginShaderMode(shader : struct Shader) void;
extern EndShaderMode() void;
extern BeginBlendMode(mode : int) void;
extern EndBlendMode() void;
extern BeginScissorMode(x : int, y : int, width : int, height : int) void;
extern EndScissorMode() void;
extern BeginVrStereoMode(config : struct VrStereoConfig) void;
extern EndVrStereoMode() void;
extern LoadVrStereoConfig(device : struct VrDeviceInfo) struct VrStereoConfig;
extern UnloadVrStereoConfig(config : struct VrStereoConfig) void;
extern LoadShader(vsFileName : i8 ptr, fsFileName : i8 ptr) struct Shader;
extern LoadShaderFromMemory(vsCode : i8 ptr, fsCode : i8 ptr) struct Shader;
extern IsShaderReady() int;
extern GetShaderLocation(shader : struct Shader, uniformName : i8 ptr) int;
extern GetShaderLocationAttrib(shader : struct Shader, attribName : i8 ptr) int;
extern SetShaderValue(shader : struct Shader, locIndex : int, value : void ptr, uniformType : int) void;
extern SetShaderValueV(shader : struct Shader, locIndex : int, value : void ptr, uniformType : int, count : int) void;
extern SetShaderValueMatrix(shader : struct Shader, locIndex : int, mat : struct Matrix) void;
extern SetShaderValueTexture(shader : struct Shader, locIndex : int, texture : struct Texture2D) void;
extern UnloadShader(shader : struct Shader) void;
extern GetMouseRay(mousePosition : struct Vector2, camera : struct Camera) struct Ray;
extern GetCameraMatrix(camera : struct Camera) struct Matrix;
extern GetCameraMatrix2D(camera : struct Camera2D) struct Matrix;
extern GetWorldToScreen(position : struct Vector3, camera : struct Camera) struct Vector2;
extern GetScreenToWorld2D(position : struct Vector2, camera : struct Camera2D) struct Vector2;
extern GetWorldToScreenEx(position : struct Vector3, camera : struct Camera, width : int, height : int) struct Vector2;
extern GetWorldToScreen2D(position : struct Vector2, camera : struct Camera2D) struct Vector2;
extern SetTargetFPS(fps : int) void;
extern GetFrameTime() float;
extern GetTime() double;
extern GetFPS() int;
extern SwapScreenBuffer() void;
extern PollInputEvents() void;
extern WaitTime(seconds : double) void;
extern SetRandomSeed(seed : u32) void;
extern GetRandomValue(min : int, max : int) int;
extern LoadRandomSequence(count : u32, min : int, max : int) int ptr;
extern UnloadRandomSequence(sequence : int ptr) void;
extern TakeScreenshot(fileName : i8 ptr) void;
extern SetConfigFlags(flags : u32) void;
extern OpenURL(url : i8 ptr) void;
extern TraceLog(logLevel : int, text : i8 ptr, ...) void;
extern SetTraceLogLevel(logLevel : int) void;
extern MemAlloc(size : u32) void ptr;
extern MemRealloc(ptr : void ptr, size : u32) void ptr;
extern MemFree(ptr : void ptr) void;
extern SetLoadFileDataCallback(callback : func (void ptr, int ptr) u8 ptr) void;
extern SetSaveFileDataCallback(callback : func (i8 ptr, void ptr, int) u8) void;
extern SetLoadFileTextCallback(callback : func (i8 ptr) i8 ptr) void;
extern SetSaveFileTextCallback(callback : func(i8 ptr, i8 ptr) u8) void;
extern LoadFileData(fileName : i8 ptr, dataSize : int ptr) i8 ptr;
extern UnloadFileData(data : i8 ptr) void;
extern SaveFileData() int;
extern ExportDataAsCode() int;
extern LoadFileText(fileName : i8 ptr) i8 ptr;
extern UnloadFileText(text : i8 ptr) void;
extern SaveFileText() int;
extern FileExists() int;
extern DirectoryExists() int;
extern IsFileExtension() int;
extern GetFileLength(fileName : i8 ptr) int;
extern GetFileExtension(fileName : i8 ptr) i8 ptr;
extern GetFileName(filePath : i8 ptr) i8 ptr;
extern GetFileNameWithoutExt(filePath : i8 ptr) i8 ptr;
extern GetDirectoryPath(filePath : i8 ptr) i8 ptr;
extern GetPrevDirectoryPath(dirPath : i8 ptr) i8 ptr;
extern GetWorkingDirectory() i8 ptr;
extern GetApplicationDirectory() i8 ptr;
extern ChangeDirectory() int;
extern IsPathFile() int;
extern LoadDirectoryFiles(dirPath : i8 ptr) struct FilePathList;
extern LoadDirectoryFilesEx(basePath : i8 ptr, filter : i8 ptr, scanSubdirs : u8) struct FilePathList;
extern UnloadDirectoryFiles(files : struct FilePathList) void;
extern IsFileDropped() int;
extern LoadDroppedFiles() struct FilePathList;
extern UnloadDroppedFiles(files : struct FilePathList) void;
extern GetFileModTime(fileName : i8 ptr) i64;
extern CompressData(data : i8 ptr, dataSize : int, compDataSize : int ptr) i8 ptr;
extern DecompressData(compData : i8 ptr, compDataSize : int, dataSize : int ptr) i8 ptr;
extern EncodeDataBase64(data : i8 ptr, dataSize : int, outputSize : int ptr) i8 ptr;
extern DecodeDataBase64(data : i8 ptr, outputSize : int ptr) i8 ptr;
extern LoadAutomationEventList(fileName : i8 ptr) struct AutomationEventList;
extern UnloadAutomationEventList(list : struct AutomationEventList ptr) void;
extern ExportAutomationEventList() int;
extern SetAutomationEventList(list : struct AutomationEventList ptr) void;
extern SetAutomationEventBaseFrame(frame : int) void;
extern StartAutomationEventRecording() void;
extern StopAutomationEventRecording() void;
extern PlayAutomationEvent(event : struct AutomationEvent) void;
extern IsKeyPressed() int;
extern IsKeyPressedRepeat() int;
extern IsKeyDown() int;
extern IsKeyReleased() int;
extern IsKeyUp() int;
extern GetKeyPressed() int;
extern GetCharPressed() int;
extern SetExitKey(key : int) void;
extern IsGamepadAvailable() int;
extern GetGamepadName(gamepad : int) i8 ptr;
extern IsGamepadButtonPressed() int;
extern IsGamepadButtonDown() int;
extern IsGamepadButtonReleased() int;
extern IsGamepadButtonUp() int;
extern GetGamepadButtonPressed() int;
extern GetGamepadAxisCount(gamepad : int) int;
extern GetGamepadAxisMovement(gamepad : int, axis : int) float;
extern SetGamepadMappings(mappings : i8 ptr) int;
extern IsMouseButtonPressed() int;
extern IsMouseButtonDown() int;
extern IsMouseButtonReleased() int;
extern IsMouseButtonUp() int;
extern GetMouseX() int;
extern GetMouseY() int;
extern GetMousePosition() struct Vector2;
extern GetMouseDelta() struct Vector2;
extern SetMousePosition(x : int, y : int) void;
extern SetMouseOffset(offsetX : int, offsetY : int) void;
extern SetMouseScale(scaleX : float, scaleY : float) void;
extern GetMouseWheelMove() float;
extern GetMouseWheelMoveV() struct Vector2;
extern SetMouseCursor(cursor : int) void;
extern GetTouchX() int;
extern GetTouchY() int;
extern GetTouchPosition(index : int) struct Vector2;
extern GetTouchPointId(index : int) int;
extern GetTouchPointCount() int;
extern SetGesturesEnabled(flags : u32) void;
extern IsGestureDetected() int;
extern GetGestureDetected() int;
extern GetGestureHoldDuration() float;
extern GetGestureDragVector() struct Vector2;
extern GetGestureDragAngle() float;
extern GetGesturePinchVector() struct Vector2;
extern GetGesturePinchAngle() float;
extern UpdateCamera(camera : struct Camera ptr, mode : int) void;
extern UpdateCameraPro(camera : struct Camera ptr, movement : struct Vector3, rotation : struct Vector3, zoom : float) void;
extern SetShapesTexture(texture : struct Texture2D, source : struct Rectangle) void;
extern DrawPixel(posX : int, posY : int, color : struct Color) void;
extern DrawPixelV(position : struct Vector2, color : struct Color) void;
extern DrawLine(startPosX : int, startPosY : int, endPosX : int, endPosY : int, color : struct Color) void;
extern DrawLineV(startPos : struct Vector2, endPos : struct Vector2, color : struct Color) void;
extern DrawLineEx(startPos : struct Vector2, endPos : struct Vector2, thick : float, color : struct Color) void;
extern DrawLineStrip(points : struct Vector2 ptr, pointCount : int, color : struct Color) void;
extern DrawLineBezier(startPos : struct Vector2, endPos : struct Vector2, thick : float, color : struct Color) void;
extern DrawCircle(centerX : int, centerY : int, radius : float, color : struct Color) void;
extern DrawCircleSector(center : struct Vector2, radius : float, startAngle : float, endAngle : float, segments : int, color : struct Color) void;
extern DrawCircleSectorLines(center : struct Vector2, radius : float, startAngle : float, endAngle : float, segments : int, color : struct Color) void;
extern DrawCircleGradient(centerX : int, centerY : int, radius : float, color1 : struct Color, color2 : struct Color) void;
extern DrawCircleV(center : struct Vector2, radius : float, color : struct Color) void;
extern DrawCircleLines(centerX : int, centerY : int, radius : float, color : struct Color) void;
extern DrawCircleLinesV(center : struct Vector2, radius : float, color : struct Color) void;
extern DrawEllipse(centerX : int, centerY : int, radiusH : float, radiusV : float, color : struct Color) void;
extern DrawEllipseLines(centerX : int, centerY : int, radiusH : float, radiusV : float, color : struct Color) void;
extern DrawRing(center : struct Vector2, innerRadius : float, outerRadius : float, startAngle : float, endAngle : float, segments : int, color : struct Color) void;
extern DrawRingLines(center : struct Vector2, innerRadius : float, outerRadius : float, startAngle : float, endAngle : float, segments : int, color : struct Color) void;
extern DrawRectangle(posX : int, posY : int, width : int, height : int, color : struct Color) void;
extern DrawRectangleV(position : struct Vector2, size : struct Vector2, color : struct Color) void;
extern DrawRectangleRec(rec : struct Rectangle, color : struct Color) void;
extern DrawRectanglePro(rec : struct Rectangle, origin : struct Vector2, rotation : float, color : struct Color) void;
extern DrawRectangleGradientV(posX : int, posY : int, width : int, height : int, color1 : struct Color, color2 : struct Color) void;
extern DrawRectangleGradientH(posX : int, posY : int, width : int, height : int, color1 : struct Color, color2 : struct Color) void;
extern DrawRectangleGradientEx(rec : struct Rectangle, col1 : struct Color, col2 : struct Color, col3 : struct Color, col4 : struct Color) void;
extern DrawRectangleLines(posX : int, posY : int, width : int, height : int, color : struct Color) void;
extern DrawRectangleLinesEx(rec : struct Rectangle, lineThick : float, color : struct Color) void;
extern DrawRectangleRounded(rec : struct Rectangle, roundness : float, segments : int, color : struct Color) void;
extern DrawRectangleRoundedLines(rec : struct Rectangle, roundness : float, segments : int, lineThick : float, color : struct Color) void;
extern DrawTriangle(v1 : struct Vector2, v2 : struct Vector2, v3 : struct Vector2, color : struct Color) void;
extern DrawTriangleLines(v1 : struct Vector2, v2 : struct Vector2, v3 : struct Vector2, color : struct Color) void;
extern DrawTriangleFan(points : struct Vector2 ptr, pointCount : int, color : struct Color) void;
extern DrawTriangleStrip(points : struct Vector2 ptr, pointCount : int, color : struct Color) void;
extern DrawPoly(center : struct Vector2, sides : int, radius : float, rotation : float, color : struct Color) void;
extern DrawPolyLines(center : struct Vector2, sides : int, radius : float, rotation : float, color : struct Color) void;
extern DrawPolyLinesEx(center : struct Vector2, sides : int, radius : float, rotation : float, lineThick : float, color : struct Color) void;
extern DrawSplineLinear(points : struct Vector2 ptr, pointCount : int, thick : float, color : struct Color) void;
extern DrawSplineBasis(points : struct Vector2 ptr, pointCount : int, thick : float, color : struct Color) void;
extern DrawSplineCatmullRom(points : struct Vector2 ptr, pointCount : int, thick : float, color : struct Color) void;
extern DrawSplineBezierQuadratic(points : struct Vector2 ptr, pointCount : int, thick : float, color : struct Color) void;
extern DrawSplineBezierCubic(points : struct Vector2 ptr, pointCount : int, thick : float, color : struct Color) void;
extern DrawSplineSegmentLinear(p1 : struct Vector2, p2 : struct Vector2, thick : float, color : struct Color) void;
extern DrawSplineSegmentBasis(p1 : struct Vector2, p2 : struct Vector2, p3 : struct Vector2, p4 : struct Vector2, thick : float, color : struct Color) void;
extern DrawSplineSegmentCatmullRom(p1 : struct Vector2, p2 : struct Vector2, p3 : struct Vector2, p4 : struct Vector2, thick : float, color : struct Color) void;
extern DrawSplineSegmentBezierQuadratic(p1 : struct Vector2, c2 : struct Vector2, p3 : struct Vector2, thick : float, color : struct Color) void;
extern DrawSplineSegmentBezierCubic(p1 : struct Vector2, c2 : struct Vector2, c3 : struct Vector2, p4 : struct Vector2, thick : float, color : struct Color) void;
extern GetSplinePointLinear(startPos : struct Vector2, endPos : struct Vector2, t : float) struct Vector2;
extern GetSplinePointBasis(p1 : struct Vector2, p2 : struct Vector2, p3 : struct Vector2, p4 : struct Vector2, t : float) struct Vector2;
extern GetSplinePointCatmullRom(p1 : struct Vector2, p2 : struct Vector2, p3 : struct Vector2, p4 : struct Vector2, t : float) struct Vector2;
extern GetSplinePointBezierQuad(p1 : struct Vector2, c2 : struct Vector2, p3 : struct Vector2, t : float) struct Vector2;
extern GetSplinePointBezierCubic(p1 : struct Vector2, c2 : struct Vector2, c3 : struct Vector2, p4 : struct Vector2, t : float) struct Vector2;
extern CheckCollisionRecs() int;
extern CheckCollisionCircles() int;
extern CheckCollisionCircleRec() int;
extern CheckCollisionPointRec() int;
extern CheckCollisionPointCircle() int;
extern CheckCollisionPointTriangle() int;
extern CheckCollisionPointPoly() int;
extern CheckCollisionLines() int;
extern CheckCollisionPointLine() int;
extern GetCollisionRec(rec1 : struct Rectangle, rec2 : struct Rectangle) struct Rectangle;
extern LoadImage(fileName : i8 ptr) struct Image;
extern LoadImageRaw(fileName : i8 ptr, width : int, height : int, format : int, headerSize : int) struct Image;
extern LoadImageSvg(fileNameOrString : i8 ptr, width : int, height : int) struct Image;
extern LoadImageAnim(fileName : i8 ptr, frames : int ptr) struct Image;
extern LoadImageFromMemory(fileType : i8 ptr, fileData : i8 ptr, dataSize : int) struct Image;
extern LoadImageFromTexture(texture : struct Texture2D) struct Image;
extern LoadImageFromScreen() struct Image;
extern IsImageReady() int;
extern UnloadImage(image : struct Image) void;
extern ExportImage() int;
extern ExportImageToMemory(image : struct Image, fileType : i8 ptr, fileSize : int ptr) i8 ptr;
extern ExportImageAsCode() int;
extern GenImageColor(width : int, height : int, color : struct Color) struct Image;
extern GenImageGradientLinear(width : int, height : int, direction : int, start : struct Color, end : struct Color) struct Image;
extern GenImageGradientRadial(width : int, height : int, density : float, inner : struct Color, outer : struct Color) struct Image;
extern GenImageGradientSquare(width : int, height : int, density : float, inner : struct Color, outer : struct Color) struct Image;
extern GenImageChecked(width : int, height : int, checksX : int, checksY : int, col1 : struct Color, col2 : struct Color) struct Image;
extern GenImageWhiteNoise(width : int, height : int, factor : float) struct Image;
extern GenImagePerlinNoise(width : int, height : int, offsetX : int, offsetY : int, scale : float) struct Image;
extern GenImageCellular(width : int, height : int, tileSize : int) struct Image;
extern GenImageText(width : int, height : int, text : i8 ptr) struct Image;
extern ImageCopy(image : struct Image) struct Image;
extern ImageFromImage(image : struct Image, rec : struct Rectangle) struct Image;
extern ImageText(text : i8 ptr, fontSize : int, color : struct Color) struct Image;
extern ImageTextEx(font : struct Font, text : i8 ptr, fontSize : float, spacing : float, tint : struct Color) struct Image;
extern ImageFormat(image : struct Image ptr, newFormat : int) void;
extern ImageToPOT(image : struct Image ptr, fill : struct Color) void;
extern ImageCrop(image : struct Image ptr, crop : struct Rectangle) void;
extern ImageAlphaCrop(image : struct Image ptr, threshold : float) void;
extern ImageAlphaClear(image : struct Image ptr, color : struct Color, threshold : float) void;
extern ImageAlphaMask(image : struct Image ptr, alphaMask : struct Image) void;
extern ImageAlphaPremultiply(image : struct Image ptr) void;
extern ImageBlurGaussian(image : struct Image ptr, blurSize : int) void;
extern ImageResize(image : struct Image ptr, newWidth : int, newHeight : int) void;
extern ImageResizeNN(image : struct Image ptr, newWidth : int, newHeight : int) void;
extern ImageResizeCanvas(image : struct Image ptr, newWidth : int, newHeight : int, offsetX : int, offsetY : int, fill : struct Color) void;
extern ImageMipmaps(image : struct Image ptr) void;
extern ImageDither(image : struct Image ptr, rBpp : int, gBpp : int, bBpp : int, aBpp : int) void;
extern ImageFlipVertical(image : struct Image ptr) void;
extern ImageFlipHorizontal(image : struct Image ptr) void;
extern ImageRotate(image : struct Image ptr, degrees : int) void;
extern ImageRotateCW(image : struct Image ptr) void;
extern ImageRotateCCW(image : struct Image ptr) void;
extern ImageColorTint(image : struct Image ptr, color : struct Color) void;
extern ImageColorInvert(image : struct Image ptr) void;
extern ImageColorGrayscale(image : struct Image ptr) void;
extern ImageColorContrast(image : struct Image ptr, contrast : float) void;
extern ImageColorBrightness(image : struct Image ptr, brightness : int) void;
extern ImageColorReplace(image : struct Image ptr, color : struct Color, replace : struct Color) void;
extern LoadImageColors(image : struct Image) struct Color ptr;
extern LoadImagePalette(image : struct Image, maxPaletteSize : int, colorCount : int ptr) struct Color ptr;
extern UnloadImageColors(colors : struct Color ptr) void;
extern UnloadImagePalette(colors : struct Color ptr) void;
extern GetImageAlphaBorder(image : struct Image, threshold : float) struct Rectangle;
extern GetImageColor(image : struct Image, x : int, y : int) struct Color;
extern ImageClearBackground(dst : struct Image ptr, color : struct Color) void;
extern ImageDrawPixel(dst : struct Image ptr, posX : int, posY : int, color : struct Color) void;
extern ImageDrawPixelV(dst : struct Image ptr, position : struct Vector2, color : struct Color) void;
extern ImageDrawLine(dst : struct Image ptr, startPosX : int, startPosY : int, endPosX : int, endPosY : int, color : struct Color) void;
extern ImageDrawLineV(dst : struct Image ptr, start : struct Vector2, end : struct Vector2, color : struct Color) void;
extern ImageDrawCircle(dst : struct Image ptr, centerX : int, centerY : int, radius : int, color : struct Color) void;
extern ImageDrawCircleV(dst : struct Image ptr, center : struct Vector2, radius : int, color : struct Color) void;
extern ImageDrawCircleLines(dst : struct Image ptr, centerX : int, centerY : int, radius : int, color : struct Color) void;
extern ImageDrawCircleLinesV(dst : struct Image ptr, center : struct Vector2, radius : int, color : struct Color) void;
extern ImageDrawRectangle(dst : struct Image ptr, posX : int, posY : int, width : int, height : int, color : struct Color) void;
extern ImageDrawRectangleV(dst : struct Image ptr, position : struct Vector2, size : struct Vector2, color : struct Color) void;
extern ImageDrawRectangleRec(dst : struct Image ptr, rec : struct Rectangle, color : struct Color) void;
extern ImageDrawRectangleLines(dst : struct Image ptr, rec : struct Rectangle, thick : int, color : struct Color) void;
extern ImageDraw(dst : struct Image ptr, src : struct Image, srcRec : struct Rectangle, dstRec : struct Rectangle, tint : struct Color) void;
extern ImageDrawText(dst : struct Image ptr, text : i8 ptr, posX : int, posY : int, fontSize : int, color : struct Color) void;
extern ImageDrawTextEx(dst : struct Image ptr, font : struct Font, text : i8 ptr, position : struct Vector2, fontSize : float, spacing : float, tint : struct Color) void;
extern LoadTexture(fileName : i8 ptr) struct Texture2D;
extern LoadTextureFromImage(image : struct Image) struct Texture2D;
extern LoadTextureCubemap(image : struct Image, layout : int) struct TextureCubemap;
extern LoadRenderTexture(width : int, height : int) struct RenderTexture2D;
extern IsTextureReady() int;
extern UnloadTexture(texture : struct Texture2D) void;
extern IsRenderTextureReady() int;
extern UnloadRenderTexture(target : struct RenderTexture2D) void;
extern UpdateTexture(texture : struct Texture2D, pixels : void ptr) void;
extern UpdateTextureRec(texture : struct Texture2D, rec : struct Rectangle, pixels : void ptr) void;
extern GenTextureMipmaps(texture : struct Texture2D ptr) void;
extern SetTextureFilter(texture : struct Texture2D, filter : int) void;
extern SetTextureWrap(texture : struct Texture2D, wrap : int) void;
extern DrawTexture(texture : struct Texture2D, posX : int, posY : int, tint : struct Color) void;
extern DrawTextureV(texture : struct Texture2D, position : struct Vector2, tint : struct Color) void;
extern DrawTextureEx(texture : struct Texture2D, position : struct Vector2, rotation : float, scale : float, tint : struct Color) void;
extern DrawTextureRec(texture : struct Texture2D, source : struct Rectangle, position : struct Vector2, tint : struct Color) void;
extern DrawTexturePro(texture : struct Texture2D, source : struct Rectangle, dest : struct Rectangle, origin : struct Vector2, rotation : float, tint : struct Color) void;
extern DrawTextureNPatch(texture : struct Texture2D, nPatchInfo : struct NPatchInfo, dest : struct Rectangle, origin : struct Vector2, rotation : float, tint : struct Color) void;
extern Fade(color : struct Color, alpha : float) struct Color;
extern ColorToInt(color : struct Color) int;
extern ColorNormalize(color : struct Color) struct Vector4;
extern ColorFromNormalized(normalized : struct Vector4) struct Color;
extern ColorToHSV(color : struct Color) struct Vector3;
extern ColorFromHSV(hue : float, saturation : float, value : float) struct Color;
extern ColorTint(color : struct Color, tint : struct Color) struct Color;
extern ColorBrightness(color : struct Color, factor : float) struct Color;
extern ColorContrast(color : struct Color, contrast : float) struct Color;
extern ColorAlpha(color : struct Color, alpha : float) struct Color;
extern ColorAlphaBlend(dst : struct Color, src : struct Color, tint : struct Color) struct Color;
extern GetColor(hexValue : u32) struct Color;
extern GetPixelColor(srcPtr : void ptr, format : int) struct Color;
extern SetPixelColor(dstPtr : void ptr, color : struct Color, format : int) void;
extern GetPixelDataSize(width : int, height : int, format : int) int;
extern GetFontDefault() struct Font;
extern LoadFont(fileName : i8 ptr) struct Font;
extern LoadFontEx(fileName : i8 ptr, fontSize : int, codepoints : int ptr, codepointCount : int) struct Font;
extern LoadFontFromImage(image : struct Image, key : struct Color, firstChar : int) struct Font;
extern LoadFontFromMemory(fileType : i8 ptr, fileData : i8 ptr, dataSize : int, fontSize : int, codepoints : int ptr, codepointCount : int) struct Font;
extern IsFontReady() int;
extern LoadFontData(fileData : i8 ptr, dataSize : int, fontSize : int, codepoints : int ptr, codepointCount : int, type : int) struct GlyphInfo ptr;
extern GenImageFontAtlas(glyphs : struct GlyphInfo ptr, glyphRecs : struct Rectangle ptr ptr, glyphCount : int, fontSize : int, padding : int, packMethod : int) struct Image;
extern UnloadFontData(glyphs : struct GlyphInfo ptr, glyphCount : int) void;
extern UnloadFont(font : struct Font) void;
extern ExportFontAsCode() int;
extern DrawFPS(posX : int, posY : int) void;
extern DrawText(text : i8 ptr, posX : int, posY : int, fontSize : int, color : struct Color) void;
extern DrawTextEx(font : struct Font, text : i8 ptr, position : struct Vector2, fontSize : float, spacing : float, tint : struct Color) void;
extern DrawTextPro(font : struct Font, text : i8 ptr, position : struct Vector2, origin : struct Vector2, rotation : float, fontSize : float, spacing : float, tint : struct Color) void;
extern DrawTextCodepoint(font : struct Font, codepoint : int, position : struct Vector2, fontSize : float, tint : struct Color) void;
extern DrawTextCodepoints(font : struct Font, codepoints : int ptr, codepointCount : int, position : struct Vector2, fontSize : float, spacing : float, tint : struct Color) void;
extern SetTextLineSpacing(spacing : int) void;
extern MeasureText(text : i8 ptr, fontSize : int) int;
extern MeasureTextEx(font : struct Font, text : i8 ptr, fontSize : float, spacing : float) struct Vector2;
extern GetGlyphIndex(font : struct Font, codepoint : int) int;
extern GetGlyphInfo(font : struct Font, codepoint : int) struct GlyphInfo;
extern GetGlyphAtlasRec(font : struct Font, codepoint : int) struct Rectangle;
extern LoadUTF8(codepoints : int ptr, length : int) i8 ptr;
extern UnloadUTF8(text : i8 ptr) void;
extern LoadCodepoints(text : i8 ptr, count : int ptr) int ptr;
extern UnloadCodepoints(codepoints : int ptr) void;
extern GetCodepointCount(text : i8 ptr) int;
extern GetCodepoint(text : i8 ptr, codepointSize : int ptr) int;
extern GetCodepointNext(text : i8 ptr, codepointSize : int ptr) int;
extern GetCodepointPrevious(text : i8 ptr, codepointSize : int ptr) int;
extern CodepointToUTF8(codepoint : int, utf8Size : int ptr) i8 ptr;
extern TextCopy(dst : i8 ptr, src : i8 ptr) int;
extern TextIsEqual() int;
extern TextLength(text : i8 ptr) u32;
extern TextFormat(text : i8 ptr, ...) i8 ptr;
extern TextSubtext(text : i8 ptr, position : int, length : int) i8 ptr;
extern TextReplace(text : i8 ptr, replace : i8 ptr, by : i8 ptr) i8 ptr;
extern TextInsert(text : i8 ptr, insert : i8 ptr, position : int) i8 ptr;
extern TextJoin(textList : i8 ptr ptr, count : int, delimiter : i8 ptr) i8 ptr;
extern TextSplit(text : i8 ptr, delimiter : i8, count : int ptr) i8 ptr ptr;
extern TextAppend(text : i8 ptr, append : i8 ptr, position : int ptr) void;
extern TextFindIndex(text : i8 ptr, find : i8 ptr) int;
extern TextToUpper(text : i8 ptr) i8 ptr;
extern TextToLower(text : i8 ptr) i8 ptr;
extern TextToPascal(text : i8 ptr) i8 ptr;
extern TextToInteger(text : i8 ptr) int;
extern DrawLine3D(startPos : struct Vector3, endPos : struct Vector3, color : struct Color) void;
extern DrawPoint3D(position : struct Vector3, color : struct Color) void;
extern DrawCircle3D(center : struct Vector3, radius : float, rotationAxis : struct Vector3, rotationAngle : float, color : struct Color) void;
extern DrawTriangle3D(v1 : struct Vector3, v2 : struct Vector3, v3 : struct Vector3, color : struct Color) void;
extern DrawTriangleStrip3D(points : struct Vector3 ptr, pointCount : int, color : struct Color) void;
extern DrawCube(position : struct Vector3, width : float, height : float, length : float, color : struct Color) void;
extern DrawCubeV(position : struct Vector3, size : struct Vector3, color : struct Color) void;
extern DrawCubeWires(position : struct Vector3, width : float, height : float, length : float, color : struct Color) void;
extern DrawCubeWiresV(position : struct Vector3, size : struct Vector3, color : struct Color) void;
extern DrawSphere(centerPos : struct Vector3, radius : float, color : struct Color) void;
extern DrawSphereEx(centerPos : struct Vector3, radius : float, rings : int, slices : int, color : struct Color) void;
extern DrawSphereWires(centerPos : struct Vector3, radius : float, rings : int, slices : int, color : struct Color) void;
extern DrawCylinder(position : struct Vector3, radiusTop : float, radiusBottom : float, height : float, slices : int, color : struct Color) void;
extern DrawCylinderEx(startPos : struct Vector3, endPos : struct Vector3, startRadius : float, endRadius : float, sides : int, color : struct Color) void;
extern DrawCylinderWires(position : struct Vector3, radiusTop : float, radiusBottom : float, height : float, slices : int, color : struct Color) void;
extern DrawCylinderWiresEx(startPos : struct Vector3, endPos : struct Vector3, startRadius : float, endRadius : float, sides : int, color : struct Color) void;
extern DrawCapsule(startPos : struct Vector3, endPos : struct Vector3, radius : float, slices : int, rings : int, color : struct Color) void;
extern DrawCapsuleWires(startPos : struct Vector3, endPos : struct Vector3, radius : float, slices : int, rings : int, color : struct Color) void;
extern DrawPlane(centerPos : struct Vector3, size : struct Vector2, color : struct Color) void;
extern DrawRay(ray : struct Ray, color : struct Color) void;
extern DrawGrid(slices : int, spacing : float) void;
extern LoadModel(fileName : i8 ptr) struct Model;
extern LoadModelFromMesh(mesh : struct Mesh) struct Model;
extern IsModelReady() int;
extern UnloadModel(model : struct Model) void;
extern GetModelBoundingBox(model : struct Model) struct BoundingBox;
extern DrawModel(model : struct Model, position : struct Vector3, scale : float, tint : struct Color) void;
extern DrawModelEx(model : struct Model, position : struct Vector3, rotationAxis : struct Vector3, rotationAngle : float, scale : struct Vector3, tint : struct Color) void;
extern DrawModelWires(model : struct Model, position : struct Vector3, scale : float, tint : struct Color) void;
extern DrawModelWiresEx(model : struct Model, position : struct Vector3, rotationAxis : struct Vector3, rotationAngle : float, scale : struct Vector3, tint : struct Color) void;
extern DrawBoundingBox(box : struct BoundingBox, color : struct Color) void;
extern DrawBillboard(camera : struct Camera, texture : struct Texture2D, position : struct Vector3, size : float, tint : struct Color) void;
extern DrawBillboardRec(camera : struct Camera, texture : struct Texture2D, source : struct Rectangle, position : struct Vector3, size : struct Vector2, tint : struct Color) void;
extern DrawBillboardPro(camera : struct Camera, texture : struct Texture2D, source : struct Rectangle, position : struct Vector3, up : struct Vector3, size : struct Vector2, origin : struct Vector2, rotation : float, tint : struct Color) void;
extern UploadMesh(mesh : struct Mesh ptr, dynamic : bool) void;
extern UpdateMeshBuffer(mesh : struct Mesh, index : int, data : void ptr, dataSize : int, offset : int) void;
extern UnloadMesh(mesh : struct Mesh) void;
extern DrawMesh(mesh : struct Mesh, material : struct Material, transform : struct Matrix) void;
extern DrawMeshInstanced(mesh : struct Mesh, material : struct Material, transforms : struct Matrix ptr, instances : int) void;
extern ExportMesh() int;
extern GetMeshBoundingBox(mesh : struct Mesh) struct BoundingBox;
extern GenMeshTangents(mesh : struct Mesh ptr) void;
extern GenMeshPoly(sides : int, radius : float) struct Mesh;
extern GenMeshPlane(width : float, length : float, resX : int, resZ : int) struct Mesh;
extern GenMeshCube(width : float, height : float, length : float) struct Mesh;
extern GenMeshSphere(radius : float, rings : int, slices : int) struct Mesh;
extern GenMeshHemiSphere(radius : float, rings : int, slices : int) struct Mesh;
extern GenMeshCylinder(radius : float, height : float, slices : int) struct Mesh;
extern GenMeshCone(radius : float, height : float, slices : int) struct Mesh;
extern GenMeshTorus(radius : float, size : float, radSeg : int, sides : int) struct Mesh;
extern GenMeshKnot(radius : float, size : float, radSeg : int, sides : int) struct Mesh;
extern GenMeshHeightmap(heightmap : struct Image, size : struct Vector3) struct Mesh;
extern GenMeshCubicmap(cubicmap : struct Image, cubeSize : struct Vector3) struct Mesh;
extern LoadMaterials(fileName : i8 ptr, materialCount : int ptr) struct Material ptr;
extern LoadMaterialDefault() struct Material;
extern IsMaterialReady() int;
extern UnloadMaterial(material : struct Material) void;
extern SetMaterialTexture(material : struct Material ptr, mapType : int, texture : struct Texture2D) void;
extern SetModelMeshMaterial(model : struct Model ptr, meshId : int, materialId : int) void;
extern LoadModelAnimations(fileName : i8 ptr, animCount : int ptr) struct ModelAnimation ptr;
extern UpdateModelAnimation(model : struct Model, anim : struct ModelAnimation, frame : int) void;
extern UnloadModelAnimation(anim : struct ModelAnimation) void;
extern UnloadModelAnimations(animations : struct ModelAnimation ptr, animCount : int) void;
extern IsModelAnimationValid() int;
extern CheckCollisionSpheres() int;
extern CheckCollisionBoxes() int;
extern CheckCollisionBoxSphere() int;
extern GetRayCollisionSphere(ray : struct Ray, center : struct Vector3, radius : float) struct RayCollision;
extern GetRayCollisionBox(ray : struct Ray, box : struct BoundingBox) struct RayCollision;
extern GetRayCollisionMesh(ray : struct Ray, mesh : struct Mesh, transform : struct Matrix) struct RayCollision;
extern GetRayCollisionTriangle(ray : struct Ray, p1 : struct Vector3, p2 : struct Vector3, p3 : struct Vector3) struct RayCollision;
extern GetRayCollisionQuad(ray : struct Ray, p1 : struct Vector3, p2 : struct Vector3, p3 : struct Vector3, p4 : struct Vector3) struct RayCollision;
extern InitAudioDevice() void;
extern CloseAudioDevice() void;
extern IsAudioDeviceReady() int;
extern SetMasterVolume(volume : float) void;
extern GetMasterVolume() float;
extern LoadWave(fileName : i8 ptr) struct Wave;
extern LoadWaveFromMemory(fileType : i8 ptr, fileData : i8 ptr, dataSize : int) struct Wave;
extern IsWaveReady() int;
extern LoadSound(fileName : i8 ptr) struct Sound;
extern LoadSoundFromWave(wave : struct Wave) struct Sound;
extern LoadSoundAlias(source : struct Sound) struct Sound;
extern IsSoundReady() int;
extern UpdateSound(sound : struct Sound, data : void ptr, sampleCount : int) void;
extern UnloadWave(wave : struct Wave) void;
extern UnloadSound(sound : struct Sound) void;
extern UnloadSoundAlias(alias : struct Sound) void;
extern ExportWave() int;
extern ExportWaveAsCode() int;
extern PlaySound(sound : struct Sound) void;
extern StopSound(sound : struct Sound) void;
extern PauseSound(sound : struct Sound) void;
extern ResumeSound(sound : struct Sound) void;
extern IsSoundPlaying() int;
extern SetSoundVolume(sound : struct Sound, volume : float) void;
extern SetSoundPitch(sound : struct Sound, pitch : float) void;
extern SetSoundPan(sound : struct Sound, pan : float) void;
extern WaveCopy(wave : struct Wave) struct Wave;
extern WaveCrop(wave : struct Wave ptr, initSample : int, finalSample : int) void;
extern WaveFormat(wave : struct Wave ptr, sampleRate : int, sampleSize : int, channels : int) void;
extern LoadWaveSamples(wave : struct Wave) float ptr;
extern UnloadWaveSamples(samples : float ptr) void;
extern LoadMusicStream(fileName : i8 ptr) struct Music;
extern LoadMusicStreamFromMemory(fileType : i8 ptr, data : i8 ptr, dataSize : int) struct Music;
extern IsMusicReady() int;
extern UnloadMusicStream(music : struct Music) void;
extern PlayMusicStream(music : struct Music) void;
extern IsMusicStreamPlaying() int;
extern UpdateMusicStream(music : struct Music) void;
extern StopMusicStream(music : struct Music) void;
extern PauseMusicStream(music : struct Music) void;
extern ResumeMusicStream(music : struct Music) void;
extern SeekMusicStream(music : struct Music, position : float) void;
extern SetMusicVolume(music : struct Music, volume : float) void;
extern SetMusicPitch(music : struct Music, pitch : float) void;
extern SetMusicPan(music : struct Music, pan : float) void;
extern GetMusicTimeLength(music : struct Music) float;
extern GetMusicTimePlayed(music : struct Music) float;
extern LoadAudioStream(sampleRate : u32, sampleSize : u32, channels : u32) struct AudioStream;
extern IsAudioStreamReady() int;
extern UnloadAudioStream(stream : struct AudioStream) void;
extern UpdateAudioStream(stream : struct AudioStream, data : void ptr, frameCount : int) void;
extern IsAudioStreamProcessed() int;
extern PlayAudioStream(stream : struct AudioStream) void;
extern PauseAudioStream(stream : struct AudioStream) void;
extern ResumeAudioStream(stream : struct AudioStream) void;
extern IsAudioStreamPlaying() int;
extern StopAudioStream(stream : struct AudioStream) void;
extern SetAudioStreamVolume(stream : struct AudioStream, volume : float) void;
extern SetAudioStreamPitch(stream : struct AudioStream, pitch : float) void;
extern SetAudioStreamPan(stream : struct AudioStream, pan : float) void;
extern SetAudioStreamBufferSizeDefault(size : int) void;
extern SetAudioStreamCallback(stream : struct AudioStream, callback : func (void ptr, u32) void) void;
extern AttachAudioStreamProcessor(stream : struct AudioStream, processor : func (void ptr, u32) void) void;
extern DetachAudioStreamProcessor(stream : struct AudioStream, processor : func (void ptr, u32) void) void;
extern AttachAudioMixedProcessor(processor : func (void ptr, u32) void) void;
extern DetachAudioMixedProcessor(processor : func (void ptr, u32) void) void;
